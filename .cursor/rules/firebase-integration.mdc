---
description: 
globs: 
alwaysApply: false
---
# Firebase Integration Patterns

## Firebase Configuration

### Environment Setup
```typescript
// Global variables for Firebase config
const firebaseConfig = JSON.parse(__firebase_config || '{}');
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

// Initialize Firebase app
import { initializeApp } from 'firebase/app';
const app = initializeApp(firebaseConfig);
```

### Authentication Patterns
```typescript
import { getAuth, signInAnonymously, signInWithCustomToken } from 'firebase/auth';

const auth = getAuth(app);

// Handle authentication with custom token or anonymous
if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
  await signInWithCustomToken(auth, __initial_auth_token);
} else {
  await signInAnonymously(auth);
}

// Generate user ID
const userId = auth.currentUser?.uid || crypto.randomUUID();
```

## Firestore Data Structure

### E-Ticket Document Paths
```typescript
// Private user data (secure)
const eTicketPath = `/artifacts/${appId}/users/${userId}/eTickets/${ticketId}`;

// Public reference data (minimal, non-sensitive)
const publicRefPath = `/artifacts/${appId}/public/data/eTicketReferences/${ticketId}`;
```

### Document Structure Example
```typescript
interface ETicketDocument {
  // Metadata
  id: string;
  userId: string;
  createdAt: Timestamp;
  updatedAt: Timestamp;
  status: 'draft' | 'submitted' | 'processed';
  
  // Personal Information
  personalInfo: {
    firstName: string;
    lastName: string;
    dateOfBirth: string;
    nationality: string;
    passportNumber: string;
    // ... other fields
  };
  
  // Travel Details
  travelInfo: {
    purposeOfVisit: string;
    arrivalDate: string;
    departureDate: string;
    flightNumber?: string;
    // ... other fields
  };
  
  // Generated QR Code data
  qrCodeData?: string;
  confirmationCode?: string;
}
```

## CRUD Operations

### Create E-Ticket
```typescript
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';

async function createETicket(eTicketData: ETicketDocument) {
  const ticketId = crypto.randomUUID();
  const docRef = doc(db, `artifacts/${appId}/users/${userId}/eTickets`, ticketId);
  
  await setDoc(docRef, {
    ...eTicketData,
    id: ticketId,
    userId,
    createdAt: serverTimestamp(),
    status: 'draft'
  });
  
  return ticketId;
}
```

### Update E-Ticket (Draft Saving)
```typescript
import { doc, updateDoc, serverTimestamp } from 'firebase/firestore';

async function updateETicket(ticketId: string, updates: Partial<ETicketDocument>) {
  const docRef = doc(db, `artifacts/${appId}/users/${userId}/eTickets`, ticketId);
  
  await updateDoc(docRef, {
    ...updates,
    updatedAt: serverTimestamp()
  });
}
```

### Submit E-Ticket
```typescript
async function submitETicket(ticketId: string, qrCodeData: string) {
  const docRef = doc(db, `artifacts/${appId}/users/${userId}/eTickets`, ticketId);
  
  await updateDoc(docRef, {
    status: 'submitted',
    qrCodeData,
    confirmationCode: generateConfirmationCode(),
    submittedAt: serverTimestamp()
  });
}
```

### Retrieve E-Ticket
```typescript
import { doc, getDoc } from 'firebase/firestore';

async function getETicket(ticketId: string): Promise<ETicketDocument | null> {
  const docRef = doc(db, `artifacts/${appId}/users/${userId}/eTickets`, ticketId);
  const docSnap = await getDoc(docRef);
  
  if (docSnap.exists()) {
    return docSnap.data() as ETicketDocument;
  }
  return null;
}
```

## Security Rules

### Firestore Security Rules Example
```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User can only access their own e-tickets
    match /artifacts/{appId}/users/{userId}/eTickets/{ticketId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public references are read-only for authorized systems
    match /artifacts/{appId}/public/data/eTicketReferences/{ticketId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        resource == null || // Allow creation
        resource.data.userId == request.auth.uid; // Allow updates by owner
    }
  }
}
```

## Real-time Updates (Optional)

### Listen to E-Ticket Status Changes
```typescript
import { doc, onSnapshot } from 'firebase/firestore';

function subscribeToETicketUpdates(ticketId: string, callback: (ticket: ETicketDocument) => void) {
  const docRef = doc(db, `artifacts/${appId}/users/${userId}/eTickets`, ticketId);
  
  return onSnapshot(docRef, (doc) => {
    if (doc.exists()) {
      callback(doc.data() as ETicketDocument);
    }
  });
}
```

## Error Handling

### Firebase Error Handling Patterns
```typescript
import { FirebaseError } from 'firebase/app';

async function handleFirebaseOperation<T>(operation: () => Promise<T>): Promise<T | null> {
  try {
    return await operation();
  } catch (error) {
    if (error instanceof FirebaseError) {
      console.error('Firebase Error:', error.code, error.message);
      
      switch (error.code) {
        case 'permission-denied':
          throw new Error('You do not have permission to access this resource');
        case 'not-found':
          throw new Error('The requested document was not found');
        case 'unavailable':
          throw new Error('Service temporarily unavailable. Please try again.');
        default:
          throw new Error('An unexpected error occurred. Please try again.');
      }
    }
    throw error;
  }
}
```

## Development Configuration

### Debug Mode Setup
```typescript
import { setLogLevel } from 'firebase/firestore';

// Enable debug logging in development
if (process.env.NODE_ENV === 'development') {
  setLogLevel('debug');
}
```

### Emulator Configuration (Local Development)
```typescript
import { connectFirestoreEmulator } from 'firebase/firestore';
import { connectAuthEmulator } from 'firebase/auth';

if (process.env.NODE_ENV === 'development' && !auth.config.emulator) {
  connectAuthEmulator(auth, 'http://localhost:9099');
  connectFirestoreEmulator(db, 'localhost', 8080);
}
```

## Performance Optimization

### Batch Operations for Multiple Updates
```typescript
import { writeBatch, doc } from 'firebase/firestore';

async function batchUpdateETickets(updates: Array<{ ticketId: string; data: Partial<ETicketDocument> }>) {
  const batch = writeBatch(db);
  
  updates.forEach(({ ticketId, data }) => {
    const docRef = doc(db, `artifacts/${appId}/users/${userId}/eTickets`, ticketId);
    batch.update(docRef, { ...data, updatedAt: serverTimestamp() });
  });
  
  await batch.commit();
}
```

For API integration patterns, see [Technology Stack](mdc:.cursor/rules/technology-stack.mdc).
